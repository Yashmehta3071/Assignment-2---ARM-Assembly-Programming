// T - to start/stop clock
// R - to reset clock
// S - to split time
// R1 - keeps track of minutes
// R2 - keeps track of seconds
// R3 - keeps track of ON/OFF status
// R4 - stores minutes array base address
// R5 - stores seconds array base address
//
//
// Set up Interrupt handling
//// Clock Interrupt Handler
      push {R0}
      MOV R0,#secondsCounter
      STR R0,.ClockISR
      MOV R0,#1000
      STR R0,.ClockInterruptFrequency
      MOV R1, #0        // R1 keeps track of minutes
      MOV R2, #0        // R2 keeps track of seconds
      MOV R4, #0
      MOV R5, #0
//// Keyboard Interrupt handler
      MOV R0,#keyboardHandler
      STR R0,.KeyboardISR
      MOV R0, #1
      STR R0, .KeyboardMask
//// Enable both interrupts
      MOV R0, #3        ; Set bits 0 and 1
      STR R0, .InterruptRegister
      MOV R3, #1        // R3 keeps track of state of clock
      pop {R0}
//
//
mainProgram:
      B mainProgram
//
//
writeOut:
      push {R0-R3, LR}
      BL writeStatus
      BL writeTime
      pop {R0-R3, LR}
      RET
//
//
newline:
      push {R0}
      MOV R0, #0x0A     // Add /n to R0
      STR R0, .WriteChar // Print empty lines
      STR R0, .WriteChar
      STR R0, .WriteChar
      pop {R0}          // reset R0
      RET
//
//
writeStatus:
      push {R3, LR}
      BL newline
      MOV R0, #instructions
      STR R0, .WriteString
      CMP R3, #0
      BEQ writeStopped
      MOV R3, #startmsg
      B writeStatusEnd
writeStopped:
      MOV R3, #stopmsg
writeStatusEnd:
      STR R3, .WriteString // Print msg
      pop {R3, LR}
      RET
//
//
writeTime:
      push {R0, LR}
      MOV R0, #elepsedtime
      STR R0, .WriteString
      MOV R0, R1        // minutes to R0
      STR R0, .WriteUnsignedNum
      MOV R0, #58       // ASCII code for ':'
      STR R0, .WriteChar
      MOV R0, R2        // seconds to R0
      STR R0, .WriteUnsignedNum
      MOV R0, #09
      STR R0, .WriteChar
      MOV R0, #splittime
      STR R0, .WriteString
      MOV R0, R4        // minutes to R0
      STR R0, .WriteUnsignedNum
      MOV R0, #58       // ASCII code for ':'
      STR R0, .WriteChar
      MOV R0, R5        // seconds to R0
      STR R0, .WriteUnsignedNum
      pop {R0, LR}
      RET
//
//
updateTime:
      ADD R2, R2, #1    ; increment secods
      CMP R2, #60       ; Compare R2 with 60
      BNE notSixty      ; if r2 is not equal to 60, branch to not sixty
      ADD R1, R1, #1    ; increment minutes
      MOV R2, #0        ; reset seconds to 0
notSixty:
      push {R0-R3, LR}
      BL writeOut
      pop {R0-R3, LR}
      RET
//
//
toggleClock:
      CMP R3, #0        // check state
      BNE stop          // if R3=1 stop the clock
      MOV R3, #1        // if R3 0, then 1
      B toggleClockEnd
stop:
      MOV R3, #0        // if R3 1, then 0
toggleClockEnd:
      RET
//
//
resetClock:
      MOV R1, #0
      MOV R2, #0
      MOV R4, #0
      MOV R5, #0
      RET
//
//
splitTime:
      CMP R3, #0
      BEQ splitTimeEnd
      push {R0-R3}
      MOV R4, R1
      MOV R5, R2
      pop {R0-R3}
splitTimeEnd:
      RET
//
//
// interrupt handlers
//
//
secondsCounter:
      CMP R3, #1
      BNE secondsCounterEnd
      push {R3, R4, LR}
      BL updateTime
      pop {R3, R4, LR}
secondsCounterEnd:
      RFE
//
//
keyboardHandler:
      PUSH {R0}
      LDR R0, .LastKey  // Get last pressed key
      CMP R0, #0x54     // Check if pressed key is "t"
      BNE elif1
      BL toggleClock
      B keyboardHandlerEnd
elif1:
      CMP R0, #0x52     // R
      BNE elif2
      BL resetClock
      B keyboardHandlerEnd
elif2:
      CMP R0, #0x53     // S
      BNE keyboardHandlerEnd
      BL splitTime
keyboardHandlerEnd:
      BL writeOut
      pop {R0}
      RFE
startmsg: .ASCIZ ">Clock Started!!\n"
stopmsg: .ASCIZ ">Clock Stopped!!\n"
instructions: .ASCIZ "'T': Toggle, 'R': Reset, 'S' Split\n"
elepsedtime: .ASCIZ "Elepsed Time: "
splittime: .ASCIZ "\nSplit Time  : "
minutearray: .BLOCK 128
seccondsarray: .BLOCK 128
